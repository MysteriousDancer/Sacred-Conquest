
#ifndef FREE_MOVEMENT_INSTALLED
#define FREE_MOVEMENT_INSTALLED

	#include "PopupRework/Extensions/ProcDefinitions.txt"
	#ifndef PROC_YIELD
		#define PROC_YIELD PROC_YEILD
	#endif // PROC_YIELD
	
	
	//so we want to tack our stuff onto an existing proc run through here
	//it's what's run when you're moving the cursor on the map so it helps
	//set a flag at 203F2B0 to determine if it's in free movement mode or not
	//this is part of an unused area within debuff table data that gets saved through suspend with that
	
	//change of plans, let's hook into NewPlayerPhaseProc to conditionally do ours instead
	
	PUSH
	
	ORG $59A38C
	POIN NewPlayerPhaseEvaluationFunc
	ORG $59A3B4
	POIN NewPlayerPhaseEvaluationFunc
	
	ORG $59A2E4
	POIN NewMakePhaseControllerFunc
	
	POP
	
	#define EnableFreeMovement "ASMC EnableFreeMovementASMC"
	#define DisableFreeMovement "ASMC DisableFreeMovementASMC"
	
	#include "FreeMovement.lyn.event"
	
	ALIGN 4
	FreeMovementControlProc:
	PROC_SET_NAME(FreeMovementProcName)
	PROC_SET_MARK(2)
	PROC_YIELD
	
	PROC_LABEL(0)
	PROC_CALL_ROUTINE($801C895) // ClearActionAndSave
	PROC_CALL_ROUTINE($801A1F5) // RefreshFogAndUnitMaps
	PROC_CALL_ROUTINE($8019C3D) // UpdateGameTilesGraphics
	PROC_CALL_ROUTINE($80271A1) // SMS_UpdateFromGameData
	PROC_CALL_ROUTINE($80160D1) // UpdatePlayMapMusic
	
	PROC_LABEL(9)
	//PROC_CALL_ROUTINE($808D13D) // start player phase interface proc
	PROC_CALL_ROUTINE($8027A41) // reset map sprite hover timer
	
	PROC_CALL_ROUTINE(FreeMovement_InitActiveUnit)
	PROC_CALL_ROUTINE(FreeMovement_CorrectCameraPosition)
	
	PROC_LOOP_ROUTINE(FreeMovement_MainLoop)
	
	PROC_LABEL(16)
	PROC_SLEEP(9)
	PROC_GOTO(9)
	
	PROC_LABEL(8)
	PROC_SLEEP(5)
	PROC_GOTO(9)
	
	PROC_END //unsure if this will ever get run actually but w/e better safe than sorry and also lets us end free movement just by killing the proc loop
	
	
	#define MM_Status	  "BYTE $D4 $7E $0D $08 $90 $06 $E0 $06 $00 $6F $00 $00 $49 $F4 $04 $08 $00 $00 $00 $00 $51 $26 $02 $08 $00 $00 $00 $00 $00 $00 $00 $00 $00 $00 $00 $00"
	#define MM_Guide	  "BYTE $CC $7E $0D $08 $9C $06 $E5 $06 $04 $74 $00 $00 $61 $26 $02 $08 $79 $26 $02 $08 $E5 $26 $02 $08 $00 $00 $00 $00 $00 $00 $00 $00 $00 $00 $00 $00"
	#define MM_Options	  "BYTE $C4 $7E $0D $08 $9E $06 $E3 $06 $00 $70 $00 $00 $41 $4C $02 $08 $00 $00 $00 $00 $BD $4C $02 $08 $00 $00 $00 $00 $00 $00 $00 $00 $00 $00 $00 $00"
	#define MM_Suspend 	  "BYTE $AC $7E $0D $08 $9F $06 $E4 $06 $00 $73 $00 $00 $B1 $25 $02 $08 $00 $00 $00 $00 $D1 $25 $02 $08 $00 $00 $00 $00 $00 $00 $00 $00 $00 $00 $00 $00"
	#define MM_Dunno1     "BYTE $BC $7E $0D $08 $9B $06 $E1 $06 $00 $71 $00 $00 $49 $F4 $04 $08 $00 $00 $00 $00 $29 $26 $02 $08 $00 $00 $00 $00 $00 $00 $00 $00 $00 $00 $00 $00"
	#define MM_Dunno2     "BYTE $B4 $7E $0D $08 $9D $06 $E2 $06 $00 $72 $00 $00 $CD $4C $02 $08 $00 $00 $00 $00 $E1 $4C $02 $08 $00 $00 $00 $00 $00 $00 $00 $00 $00 $00 $00 $00"
	#define MM_Separator  "WORD 0 0 0 0 0 0 0 0 0"
	#define MenuBox(XCoord, YCoord, Width, Height, Style, CommandListPointer) "BYTE XCoord YCoord Width Height; WORD Style; POIN CommandListPointer"
	#define MenuBoxFull(XCoord, YCoord, Width, Height, Style, CommandListPointer, Constructor, RPressStart, Pointer3, OnBPress, OnRPress, RPressEnd) "BYTE XCoord YCoord Width Height; WORD Style; POIN CommandListPointer Constructor RPressStart Pointer3 OnBPress OnRPress RPressEnd"
	
	ALIGN 4
	FreeMovementProcName:
	String(E_FREEMOVE)
	BYTE 0
	
	ALIGN 4
	FreeMovementLMenu:
	MenuBoxFull($01, $02, $07, 0, 0, FreeMovementMenuTable, $0, $0, $0, FreeMovementMenuOnBPress, $4F521, $4F459)
	
	ALIGN 4
	FreeMovementMenuTable:
	MM_Status
	MM_Guide
	MM_Dunno1
	MM_Dunno2
	MM_Suspend
	MM_Separator


#endif // FREE_MOVEMENT_INSTALLED

